/*
 * Copyright 2007 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.gwt.json.client;

import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.json.client.impl.Extractor;

/**
 * Automatically generates a Java wrapper around JSON object data. The GWT
 * compiler will automatically generate implementions for bean-style properties.
 * <br/> Example:
 * 
 * <pre>
 * interface HelloWrapper extends JSWrapper {
 *   public String getHello();
 * }
 *
 * HelloWrapper hello = (HelloWrapper)GWT.create(HelloWrapper.class);
 * hello.setJSONData("{hello:\"Hello world\"}");
 * Window.alert(hello.getHello());
 * </pre>
 * 
 * <p>
 * Generating getters and setters are supported, provided that the type of the
 * property is a:
 * <ul>
 * <li>primitive</li>
 * <li>boxed primitive</li>
 * <li>String</li>
 * <li>JSWrapper</li>
 * <li>JSList having a compatible component type</li>
 * <li>JavaScriptObject, including Element</li>
 * </ul>
 * </p>
 * <p>
 * The lowercased bean property name will be used as the key in the JSON data,
 * unless a <code>gwt.fieldName</code> appears on the property's getter or the
 * class/interface is annotated with a <code>gwt.namePolicy</code> annotation.
 * The valid values for the <code>namePolicy</code> are the field names on the
 * NamePolicy class, or the name of a class that implements NamePolicy.
 * </p>
 * <p>
 * If the JSON data does not contain data for a property, <code>null</code>,
 * <code>0</code>, <code>' '</code>, <code>false</code>, or an empty
 * {@link JSList} will be returned.
 * </p>
 * <p>
 * The JSWrapper supports "finishing" an abstract class to allow existing
 * classe to be retrofitted with JSWrapper support. Only <code>abstract</code>
 * getters and setters will generated by the compiler. There are no restrictions
 * on the concrete methods in a "mixed" JSWrapper.
 * </p>
 * <br/> Example:
 * 
 * <pre>
 * abstract class MixedWrapper implements JSWrapper {
 *   public abstract int getA();
 *   public abstract int getB();
 *   public int multiply() {
 *     return getA() * getB();
 *   }
 * }
 *
 * MixedWrapper wrapper = (MixedWrapper)GWT.create(MixedWrapper.class);
 * wrapper.setJSONData("{a:2, b:5}");
 * Window.alert(wrapper.multiply());
 * </pre>
 * 
 * would show you the value <code>10</code>.
 */
public interface JSWrapper {

  public Extractor getExtractor();

  /**
   * Return the JavaScriptObject that is backing the wrapper.
   */
  public JavaScriptObject getJavaScriptObject();

  /**
   * Set the JavaScriptObject to be wrapped by the generated class.
   */
  public void setJavaScriptObject(JavaScriptObject obj);

  /**
   * Convenience setter for wrapping JSON data. The data will be parsed and
   * wrapped by the instance of the JSWrapper
   */
  public void setJSONData(String data) throws JSONWrapperException;
}
